apply plugin: 'c'

def stm32_cflags = "-mcpu=cortex-m4 -mthumb -mfloat-abi=hard -mfpu=fpv4-sp-d16".trim()
def arm_cflags = "-O1 -fmessage-length=0 -fsigned-char -fno-move-loop-invariants -gstrict-dwarf -ffunction-sections -fdata-sections".trim()
def arm_linkerflags = "-TLinkerScript.ld -u print_float -Wl,--gc-sections".trim()

model {
    toolChains {
        gcc(Gcc) {
	    eachPlatform { tools ->
	        tools.cCompiler.executable = "arm-none-eabi-gcc"
		tools.linker.executable = "arm-none-eabi-gcc"
	    }
	    target("arm") {
	        cCompiler.withArguments { args ->
		    args.addAll(stm32_cflags.tokenize(' '))
		    args.addAll(arm_cflags.tokenize(' '))
		}
		linker.withArguments { args ->
		    args.addAll(stm32_cflags.tokenize(' '))
		    args.addAll(arm_cflags.tokenize(' '))
		    args.addAll(arm_linkerflags.tokenize(' '))
		}
	    }
	}
    }
    platforms {
        arm {
	    architecture "arm"
	}
    }
    components {
        hello(NativeLibrarySpec) {
	    targetPlatform "arm"
	    sources {
	        c {
		    source {
		        srcDir "src/hello/c"
			include "**/*.c"
		    }
		    exportedHeaders {
		        srcDir "src/hello/headers"
		    }
		}
	    }
	}
        main(NativeExecutableSpec) {
	    targetPlatform "arm"
	    sources {
	        c {
		    source {
		        srcDir "src/main/c"
			include "**/*.c"
		    }
		}
	    }
	    binaries.all {
	        lib library: 'hello', linkage: 'static'
	    }
	}
    }
}


